services:
  api_gateway:
    build:
      context: ./services/api_gateway
      dockerfile: Dockerfile
    container_name: api_gateway
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - DATA_SIMULATOR_URL=http://data_simulator:8000
      - CASHFLOW_SERVICE_URL=http://cashflow_service:8002
      - COST_SERVICE_URL=http://cost_service:8001
      - COMPLIANCE_SERVICE_URL=http://compliance_service:8003
      - DEBUG=${DEBUG}
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URI=${REDIS_URI}
    depends_on:
      - data_simulator
      - cashflow_service
      - cost_service
      - compliance_service
      - mongodb
      - redis
    networks:
      - merchant_analysis_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    env_file: .env

  data_simulator:
    build:
      context: ./services/data_simulator
      dockerfile: Dockerfile
    container_name: data_simulator
    restart: unless-stopped
    environment:
      - MONGODB_URI=${MONGODB_URI}
      - DEBUG=${DEBUG}
      - INIT_DEMO_DATA=${INIT_DEMO_DATA}
      - ENVIRONMENT=${ENVIRONMENT}
      - WORKERS=2
    depends_on:
      - mongodb
    networks:
      - merchant_analysis_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    env_file: .env

  cashflow_service:
    build:
      context: ./services/cashflow_predictor
      dockerfile: Dockerfile
    container_name: cashflow_service
    restart: unless-stopped
    environment:
      - MONGODB_URI=${MONGODB_URI}
      - DEBUG=${DEBUG}
      - ENVIRONMENT=${ENVIRONMENT}
      - WORKERS=2
    depends_on:
      - mongodb
      - data_simulator
    networks:
      - merchant_analysis_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    env_file: .env

  cost_service:
    build:
      context: ./services/cost_analyzer
      dockerfile: Dockerfile
    container_name: cost_service
    restart: unless-stopped
    environment:
      - MONGODB_URI=${MONGODB_URI}
      - DEBUG=${DEBUG}
      - ENVIRONMENT=${ENVIRONMENT}
      - WORKERS=2
    depends_on:
      - mongodb
      - data_simulator
    networks:
      - merchant_analysis_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    env_file: .env

  compliance_service:
    build:
      context: ./services/compliance_checker
      dockerfile: Dockerfile
    container_name: compliance_service
    restart: unless-stopped
    environment:
      - MONGODB_URI=${MONGODB_URI}
      - DEBUG=${DEBUG}
      - ENVIRONMENT=${ENVIRONMENT}
      - WORKERS=2
    depends_on:
      - mongodb
      - data_simulator
    networks:
      - merchant_analysis_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    env_file: .env

  mongodb:
    image: mongo:5.0
    container_name: mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./config/mongodb:/docker-entrypoint-initdb.d
    environment:
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
    networks:
      - merchant_analysis_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/merchant_analytics --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    env_file: .env
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G

  redis:
    image: redis:6.2-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --appendfsync everysec --maxmemory 1gb --maxmemory-policy allkeys-lru
    networks:
      - merchant_analysis_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    env_file: .env
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  prometheus:
    image: prom/prometheus:v2.36.0
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - merchant_analysis_network
    depends_on:
      - api_gateway
      - data_simulator
      - cashflow_service
      - cost_service
      - compliance_service
    env_file: .env

  grafana:
    image: grafana/grafana:9.0.0
    container_name: grafana
    restart: unless-stopped
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=${GF_USERS_ALLOW_SIGN_UP}
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - merchant_analysis_network
    env_file: .env

networks:
  merchant_analysis_network:
    driver: bridge

volumes:
  mongodb_data:
  redis_data:
  prometheus_data:
  grafana_data: 