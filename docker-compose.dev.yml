services:
  api_gateway:
    build:
      context: ./services/api_gateway
      dockerfile: Dockerfile
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
    ports:
      - "8000:8000"
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - DATA_SIMULATOR_URL=http://data_simulator:8000
      - CASHFLOW_SERVICE_URL=http://cashflow_service:8002
      - COST_SERVICE_URL=http://cost_service:8001
      - COMPLIANCE_SERVICE_URL=http://compliance_service:8003
      - DEBUG=${DEBUG}
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URI=${REDIS_URI}
    depends_on:
      - data_simulator
      - cashflow_service
      - cost_service
      - compliance_service
      - mongodb
      - redis
    networks:
      - merchant_analysis_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    env_file: .env

  data_simulator:
    build:
      context: ./services/data_simulator
      dockerfile: Dockerfile
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
    environment:
      - MONGODB_URI=${MONGODB_URI}
      - DEBUG=${DEBUG}
      - INIT_DEMO_DATA=${INIT_DEMO_DATA}
      - ENVIRONMENT=${ENVIRONMENT}
      - WORKERS=2
    depends_on:
      - mongodb
    networks:
      - merchant_analysis_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    env_file: .env

  cashflow_service:
    build:
      context: ./services/cashflow_predictor
      dockerfile: Dockerfile
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
    environment:
      - MONGODB_URI=${MONGODB_URI}
      - DEBUG=${DEBUG}
      - ENVIRONMENT=${ENVIRONMENT}
      - WORKERS=2
    depends_on:
      - mongodb
      - data_simulator
    networks:
      - merchant_analysis_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    env_file: .env

  cost_service:
    build:
      context: ./services/cost_analyzer
      dockerfile: Dockerfile
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
    environment:
      - MONGODB_URI=${MONGODB_URI}
      - DEBUG=${DEBUG}
      - ENVIRONMENT=${ENVIRONMENT}
      - WORKERS=2
    depends_on:
      - mongodb
      - data_simulator
    networks:
      - merchant_analysis_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    env_file: .env

  compliance_service:
    build:
      context: ./services/compliance_checker
      dockerfile: Dockerfile
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
    environment:
      - MONGODB_URI=${MONGODB_URI}
      - DEBUG=${DEBUG}
      - ENVIRONMENT=${ENVIRONMENT}
      - WORKERS=2
    depends_on:
      - mongodb
      - data_simulator
    networks:
      - merchant_analysis_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    env_file: .env

  mongodb:
    image: mongo:4.4
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - merchant_analysis_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/merchant_analytics --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    env_file: .env

  redis:
    image: redis:6
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - merchant_analysis_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    env_file: .env

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - merchant_analysis_network
    env_file: .env

  consul:
    image: consul:1.9
    ports:
      - "8500:8500"
    command: agent -dev -client=0.0.0.0
    volumes:
      - consul_data:/consul/data
    networks:
      - merchant_analysis_network
    env_file: .env

  prometheus:
    image: prom/prometheus:v2.36.0
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - merchant_analysis_network
    depends_on:
      - api_gateway
      - data_simulator
      - cashflow_service
      - cost_service
      - compliance_service
    env_file: .env

  grafana:
    image: grafana/grafana:9.0.0
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=${GF_USERS_ALLOW_SIGN_UP}
    depends_on:
      - prometheus
    networks:
      - merchant_analysis_network
    env_file: .env

  jaeger:
    image: jaegertracing/all-in-one:1.27
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "9411:9411"
    networks:
      - merchant_analysis_network
    env_file: .env

volumes:
  mongodb_data:
  redis_data:
  rabbitmq_data:
  consul_data:
  prometheus_data:
  grafana_data:

networks:
  merchant_analysis_network:
    driver: bridge 